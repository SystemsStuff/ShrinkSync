name: Release Go Module

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go version
        uses: actions/setup-go@v2
        with:
          go-version: '1.21.5'

      - name: Set up Git
        run: |
          git config --global user.email "reethu.vinta@gmail.com"
          git config --global user.name "Reethu Vinta"

      - name: Build and test Go module
        run: |
          go mod tidy
          go build ./...
          go test ./...

      - name: Determine Version
        id: determine_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          IFS='.' read -r major minor patch <<< "$VERSION"
          if [ "$VERSION" = "v0.0.0" ]; then
            NEXT_VERSION="v0.0.0"
          else
            NEXT_VERSION="$major.$minor.$((patch + 1))"
          fi  
          echo "::set-output name=next_version::$NEXT_VERSION"

      - name: Create Release Tag
        id: create_tag
        run: |
          git tag -a ${{ steps.determine_version.outputs.next_version }} -m "Release ${{ steps.determine_version.outputs.next_version }}"
          echo "::set-output name=tag::${{ steps.determine_version.outputs.next_version }}"

      - name: Push Tag to Repository
        run: git push origin ${{ steps.create_tag.outputs.tag }}

      - name: Index ShrinkSync Module
        run: GOPROXY=proxy.golang.org go list -m github.com/SystemsStuff/ShrinkSync@${{ steps.create_tag.outputs.tag }}     
           
      - name: Verify release
        run: |
          if go get github.com/SystemsStuff/ShrinkSync@${{ steps.create_tag.outputs.tag }}; then
            echo "Version released successfully"
          else
            echo "Something went wrong with the release. Please check!"
            exit 1
          fi           